// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package smart.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import com.mendix.core.Core;
import smart.proxies.Asset;
import smart.proxies.Variable;
import smart.proxies.TimeSeriesPoint;
import iihessentialsconnector.proxies.CalculateRequest;
import iihessentialsconnector.proxies.DataSources;
import iihessentialsconnector.proxies.DataSource;
import iihessentialsconnector.proxies.ENUM_Calculate_Type;
import iihessentialsconnector.proxies.ENUM_Boolean;
import iihessentialsconnector.proxies.CalculateMessage;
import iihessentialsconnector.proxies.Calculation;
import iihessentialsconnector.proxies.CalculationValue;
import iihessentialsconnector.proxies.HttpError;
import iihessentialsconnector.proxies.microflows.Microflows;
import iihessentialsconnector.proxies.ENUM_AcquisitionCycle_TimeRangeBase;
import com.mendix.systemwideinterfaces.core.UserAction;

public class CalculateSingleMetric extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use DateRange.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __DateRange;
	private final smart.proxies.DateRange DateRange;
	/** @deprecated use SelectedAsset.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __SelectedAsset;
	private final smart.proxies.SelectedAsset SelectedAsset;
	private final smart.proxies.MetricType MetricType;
	private final smart.proxies.EnergyType EnergyType;
	/** @deprecated use CalculationTrend.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __CalculationTrend;
	private final smart.proxies.CalculationTrend CalculationTrend;

	public CalculateSingleMetric(
		IContext context,
		IMendixObject _dateRange,
		IMendixObject _selectedAsset,
		java.lang.String _metricType,
		java.lang.String _energyType,
		IMendixObject _calculationTrend
	)
	{
		super(context);
		this.__DateRange = _dateRange;
		this.DateRange = _dateRange == null ? null : smart.proxies.DateRange.initialize(getContext(), _dateRange);
		this.__SelectedAsset = _selectedAsset;
		this.SelectedAsset = _selectedAsset == null ? null : smart.proxies.SelectedAsset.initialize(getContext(), _selectedAsset);
		this.MetricType = _metricType == null ? null : smart.proxies.MetricType.valueOf(_metricType);
		this.EnergyType = _energyType == null ? null : smart.proxies.EnergyType.valueOf(_energyType);
		this.__CalculationTrend = _calculationTrend;
		this.CalculationTrend = _calculationTrend == null ? null : smart.proxies.CalculationTrend.initialize(getContext(), _calculationTrend);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = getContext();

		String[] assetNames = SelectedAsset.getSelectedAssetName().split(",");

		List<IMendixObject> existingPoints = Core.retrieveXPathQuery(context, "//Smart.TimeSeriesPoint");
		Core.delete(context, existingPoints);

		List<IMendixObject> timeSeriesPointList = new ArrayList<>();

		for (String assetName : assetNames) {
			List<Asset> assets = Asset.load(context, "[Nom = '" + assetName.trim() + "']");
			if (assets.isEmpty()) {
				Core.getLogger("CalculateSingleMetric").warn("Asset not found: " + assetName);
				continue;
			}
			Asset asset = assets.get(0);

			List<Variable> variableList = Variable.load(context, "[Smart.Variable_Asset = " + asset.getMendixObject().getId().toLong() + "]");
			
			List<Variable> variableMetric = variableList.stream()
				.filter(v -> v.getMetricType() != null && v.getMetricType() == MetricType)
				.collect(Collectors.toList());

			Variable variableEnergyType = variableMetric.stream()
				.filter(v -> v.getEnergyType() != null && v.getEnergyType() == EnergyType)
				.findFirst()
				.orElse(null);

			if (variableEnergyType == null) {
				Core.getLogger("CalculateSingleMetric").warn("No matching variable for Asset: " + assetName + ", MetricType: " + MetricType + ", EnergyType: " + EnergyType);
				continue;
			}
			
			CalculateRequest calculateRequest = smart.proxies.microflows.Microflows.calculationTimeRange(context, DateRange, CalculationTrend);

			DataSources newDataSource = new DataSources(context);
			newDataSource.setCalculateRequest_DataSources(calculateRequest);
			
			DataSource ds = new DataSource(context);
			ds.set_id(variableEnergyType.getIIH_Id());
			ds.set_type(ENUM_Calculate_Type.Variable);
			ds.setAggregation(CalculationTrend.getAggregation());
			ds.setDataSource_DataSources(newDataSource);

			// Calling the correct microflow with all parameters
			CalculateMessage calculateMessage = iihessentialsconnector.proxies.microflows.Microflows.pOST_v1_8_Calculate_Trend(context, calculateRequest, null, null, null);

			HttpError error = calculateMessage.getHttpError_IIHMessage(context);
			if (error != null) {
				Core.getLogger("CalculateSingleMetric").error("IIH API Error: " + error.getMessage());
				continue; 
			}

			List<IMendixObject> calculationIMendixObjectList = Core.retrieveByPath(context, calculateMessage.getMendixObject(), "IIHEssentialsConnector.Calculation_CalculateMessage");
			List<Calculation> calculationList = new ArrayList<Calculation>();
			for(IMendixObject calculationIMendixObject : calculationIMendixObjectList) {
				calculationList.add(Calculation.initialize(context, calculationIMendixObject));
			}

			if(calculationList != null) {
				for (Calculation calc : calculationList) {
					List<IMendixObject> valueIMendixObjectList = Core.retrieveByPath(context, calc.getMendixObject(), "IIHEssentialsConnector.CalculationValue_Calculation");
					List<CalculationValue> valueList = new ArrayList<CalculationValue>();
					for(IMendixObject valueIMendixObject : valueIMendixObjectList) {
						valueList.add(CalculationValue.initialize(context, valueIMendixObject));
					}

					if(valueList != null) {
						for (CalculationValue calcValue : valueList) {
							if (calcValue.getValue() != null) {
								TimeSeriesPoint newPoint = new TimeSeriesPoint(context);
								newPoint.setTimeSeriesPoint_Asset(asset);
								newPoint.setTimestamp(calcValue.getTimestamp());
								newPoint.setValue(calcValue.getValue());
								timeSeriesPointList.add(newPoint.getMendixObject());
							}
						}
					}
				}
			}
		}

		return timeSeriesPointList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CalculateSingleMetric";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
