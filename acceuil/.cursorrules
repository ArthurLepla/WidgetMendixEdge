# ------------------------------------------------------------------------
# WIDGET-SPECIFIC CURSOR AI RULES
# ------------------------------------------------------------------------
# Widget: breadcrumbselector
# Version: 1.0.0
# Generated by MendixWidgetAnalyzer

# ------------------------------------------------------------------------
# DETECTED TECH STACK
# ------------------------------------------------------------------------
1. DEPENDENCIES
   Production:
   - @ant-design/icons: ^5.5.2
   - antd: ^5.22.7
   - classnames: ^2.2.6
   - dayjs: ^1.11.10

   Development:
   - @mendix/pluggable-widgets-tools: ^10.15.0
   - @types/big.js: ^6.0.2
   - autoprefixer: ^10.4.20
   - postcss: ^8.4.49
   - tailwindcss: ^3.4.17

2. COMPONENTS
   Detected React Components:
   - useRouter
   - CustomCaption
   - useIsSSR
   - Disabled
   - ModifiersStyle
   - PersianFormatted
   - SSRProvider
   - MultipleMonths
   - CaptionLabel
   - openLink
   - FromToMonth
   - Input
   - TestCase1567
   - FocusContext
   - Spanish
   - FocusScope
   - MultiSelector
   - Controlled
   - ModifiersCustom
   - DropdownMonths
   - YearsDropdown
   - InputTime
   - SingleControlled
   - PressResponder
   - Weeknumber
   - DayButton
   - StartEndMonths
   - CustomDayButton
   - CustomSingle
   - DayPicker
   - Keyboard
   - RangeRequired
   - MultipleMonthsPaged
   - Formatters
   - RangeMinMax
   - Multiple
   - enUS
   - Footer
   - StartEndMonthsShowOutsideDays
   - Root
   - createFocusManager
   - ContainerAttributes
   - AccessibleDatePicker
   - ModifiersDisabled
   - WeeknumberIso
   - DropdownNav
   - Weeks
   - FocusRecursive
   - MonthCaption
   - CustomMultiple
   - getDateLib
   - IsSSRContext
   - isFocusable
   - StylingInline
   - DropdownMultipleMonths
   - FocusRing
   - SingleRequired
   - Single
   - OutsideDays
   - WeekNumberHeader
   - StylingCss
   - ModifiersHidden
   - BroadcastCalendar
   - Nav
   - WeekStartsOn
   - Option
   - RangeLong
   - ClearPressResponder
   - SSRContext
   - DisableNavigation
   - TestCase2047
   - useSingle
   - Persian
   - BreadcrumbSelector
   - Month
   - TestCase2585
   - MonthGrid
   - ModifiersClassnames
   - RangeShiftKey
   - useFocusManager
   - CssModules
   - WeekIso
   - TestCase2511
   - preview
   - WeekNumber
   - getFocusableTreeWalker
   - WeeknumberCustom
   - Chevron
   - TestCase2389
   - MonthsDropdown
   - faIR
   - useVirtualizer
   - AutoFocus
   - ItalianLabels
   - SpanishWeekStartsOn
   - RangeExcludeDisabled
   - Numerals
   - Breadcrumb
   - useFocusable
   - TailwindCSS
   - PersianEn
   - Weekdays
   - useGetModifiers
   - CssVariables
   - useWindowVirtualizer
   - Select
   - DOMPropsResponder
   - Range
   - StylingModifiers
   - useRange
   - PastDatesDisabled
   - MultipleRequired
   - getNextFocus
   - FixedWeeks
   - Day
   - Start
   - Dropdown
   - isElementInChildOfActiveScope
   - DefaultMonth
   - ModifiersToday
   - useMulti
   - FromToYear
   - useSyntheticLinkProps
   - useLinkProps
   - RouterContext
   - ModifiersSelected
   - HideNavigation
   - PreviousMonthButton
   - shouldClientNavigate
   - MultipleMinMax
   - Weekday
   - CustomWeek
   - Pressable
   - RouterProvider
   - Button
   - Week
   - ControlledSelection
   - NextMonthButton
   - getSyntheticLinkProps
   - Rtl
   - useSSRSafeId
   - Utc
   - Dialog
   - InputRange
   - Months
   - getDataAttributes
   - ButtonGroup
   - DateRangePicker
   - RangeLongExcludeDisabled
   - TimeZone

# ------------------------------------------------------------------------
# WIDGET-SPECIFIC GUIDELINES
# ------------------------------------------------------------------------
1. ARCHITECTURE
   - Follow the existing component structure
   - Maintain consistent naming conventions with current components
   - Respect the current file organization
   - Keep the same level of component granularity

2. STYLING
   - Continue using Tailwind CSS as implemented
   - Maintain current Tailwind class patterns
   - Follow existing color scheme and spacing
   - Maintain responsive design patterns

3. TYPESCRIPT
   - Maintain strict typing as per current implementation
   - Follow existing interface patterns
   - Keep consistent type definitions
   - Ensure proper export/import patterns

4. MENDIX INTEGRATION
   Properties to maintain:


# ------------------------------------------------------------------------
# DETECTED PATTERNS TO FOLLOW
# ------------------------------------------------------------------------
1. COMPONENT PATTERNS
   - Use functional components with hooks
   - Follow existing state management patterns
   - Maintain current event handling patterns
   - Keep consistent prop interfaces

2. CODE ORGANIZATION
   - Follow current file structure
   - Maintain separation of concerns
   - Keep consistent import organization
   - Follow existing naming conventions

3. TESTING REQUIREMENTS
   - Implement Jest tests for new components
   - Ensure proper component testing
   - Test all widget properties
   - Maintain test coverage standards

# ------------------------------------------------------------------------
# WIDGET-SPECIFIC LIMITATIONS
# ------------------------------------------------------------------------
1. COMPATIBILITY
   - Must maintain Mendix latest compatibility
   - Support same browser targets as current implementation
   - Maintain current module dependencies
   - Keep same React version compatibility

2. PERFORMANCE
   - Maintain current bundle size
   - Follow existing lazy loading patterns
   - Keep current render optimization patterns
   - Maintain performance standards

3. SECURITY
   - Follow current data handling patterns
   - Maintain input sanitization standards
   - Keep current authentication patterns
   - Follow existing security practices

# ------------------------------------------------------------------------
# END OF WIDGET-SPECIFIC RULES
# ------------------------------------------------------------------------
